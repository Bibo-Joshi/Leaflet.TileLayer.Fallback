{"version":3,"file":"leaflet.tilelayer.fallback-src.js","sources":["src/fallback.js"],"sourcesContent":["var TL = L.TileLayer,\n    TLproto = TL.prototype;\n\n\nvar FallbackTileLayer = TL.extend({\n\n\toptions: {\n\t\tminNativeZoom: 0\n\t},\n\n\tinitialize: function (urlTemplate, options) {\n\t\tTLproto.initialize.call(this, urlTemplate, options);\n\t},\n\n\tcreateTile: function (coords, done) {\n\t\tvar tile = TLproto.createTile.call(this, coords, done);\n\t\ttile._originalCoords = coords;\n\t\ttile._originalSrc = tile.src;\n\n\t\treturn tile;\n\t},\n\n\t_tileOnError: function (done, tile, e) {\n\t\tvar layer = this, // `this` is bound to the Tile Layer in TLproto.createTile.\n\t\t\toriginalCoords = tile._originalCoords,\n\t\t\tcurrentCoords = tile._currentCoords = tile._currentCoords || layer._wrapCoords(originalCoords),\n\t\t\tfallbackZoom = tile._fallbackZoom = (tile._fallbackZoom || originalCoords.z) - 1,\n\t\t\tscale = tile._fallbackScale = (tile._fallbackScale || 1) * 2,\n\t\t\ttileSize = layer.getTileSize(),\n\t\t\tstyle = tile.style,\n\t\t\tnewUrl, top, left;\n\n\t\t// If no lower zoom tiles are available, fallback to errorTile.\n\t\tif (fallbackZoom < layer.options.minNativeZoom) {\n\t\t\tdone(e, tile);\n\t\t\treturn;\n\t\t}\n\n\t\t// Modify tilePoint for replacement img.\n\t\tcurrentCoords.z = fallbackZoom;\n\t\tcurrentCoords.x = Math.floor(currentCoords.x / 2);\n\t\tcurrentCoords.y = Math.floor(currentCoords.y / 2);\n\n\t\t// Generate new src path.\n\t\tnewUrl = layer.getTileUrl(currentCoords);\n\n\t\t// Zoom replacement img.\n\t\tstyle.width = (tileSize.x * scale) + 'px';\n\t\tstyle.height = (tileSize.y * scale) + 'px';\n\n\t\t// Compute margins to adjust position.\n\t\ttop = (originalCoords.y - currentCoords.y * scale) * tileSize.y;\n\t\tstyle.marginTop = (-top) + 'px';\n\t\tleft = (originalCoords.x - currentCoords.x * scale) * tileSize.x;\n\t\tstyle.marginLeft = (-left) + 'px';\n\n\t\t// Crop (clip) image.\n\t\t// `clip` is deprecated, but browsers support for `clip-path: inset()` is far behind.\n\t\t// http://caniuse.com/#feat=css-clip-path\n\t\tstyle.clip = 'rect(' + top + 'px ' + (left + tileSize.x) + 'px ' + (top + tileSize.y) + 'px ' + left + 'px)';\n\n\t\tlayer.fire('tilefallback', {\n\t\t\ttile: tile,\n\t\t\turl: tile._originalSrc,\n\t\t\turlMissing: tile.src,\n\t\t\turlFallback: newUrl\n\t\t});\n\n\t\ttile.src = newUrl;\n\t},\n\n\tgetTileUrl: function (coords) {\n\t\tvar z = coords.z = coords.z || this._getZoomForUrl();\n\n\t\tvar data = {\n\t\t\tr: L.Browser.retina ? '@2x' : '',\n\t\t\ts: this._getSubdomain(coords),\n\t\t\tx: coords.x,\n\t\t\ty: coords.y,\n\t\t\tz: z\n\t\t};\n\t\tif (this._map && !this._map.options.crs.infinite) {\n\t\t\tvar invertedY = this._globalTileRange.max.y - coords.y;\n\t\t\tif (this.options.tms) {\n\t\t\t\tdata['y'] = invertedY;\n\t\t\t}\n\t\t\tdata['-y'] = invertedY;\n\t\t}\n\n\t\treturn L.Util.template(this._url, L.extend(data, this.options));\n\t}\n\n});\n\n\n\n// Supply with a factory for consistency with Leaflet.\nL.tileLayer.fallback = function (urlTemplate, options) {\n\treturn new FallbackTileLayer(urlTemplate, options);\n};\n\n\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,;;;;"}